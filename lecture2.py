# Коллекции данных. Профилирование и отладка

# Списки 
list_1 = []           # Создание пустого списка
list_2 = list ()      # Создание пустого списка

list_1 = [7, 9, 11, 13, 15, 17]
print (list_1[0])     # 7 - вывод первого элемента списка
print(len(list_1))    # 6 – вывод количества элементов в списке (длина)
print (list_1)
print(*list_1)

# Заполнение списка:
list_1 = list()           # создание пустого списка 
for i in range(5):        # цикл выполнится 5 раз 
    n = int(input())      # пользователь вводит целое число 
    list_1.append (n)         # сохранение элемента в конец списка 
# 1-я итерация цикла (повторение 1): n = 12, list_1 = [12] 
# 2-я итерация цикла (повторение 2): n = 7, list_1 = [12, 7] 
# 3-я итерация цикла (повторение 3): n = -1, list_1 = [12, 7, -1] 
# 4-я итерация цикла (повторение 4): n = 21, list_1 = [12, 7, -1, 21] 3
# 5-я итерация цикла (повторение 5): n = 0, list_1 = [12, 7, -1, 21, 0] 
print(list_1)             # [12, 7, -1, 21, 0]

# Взаимодействие цикла for со списком:

list_1 = [12, 7, -1, 21, 0] 
for i in list_1: 
      print(i)         # вывод каждого элемента списка 
# 1-я итерация цикла (повторение 1): i = 12 
# 2-я итерация цикла (повторение 2): i = 7 
# 3-я итерация цикла (повторение 3): i = -1 
# 4-я итерация цикла (повторение 4): i = 21 
# 5-я итерация цикла (повторение 5): i = 0

list_1 = [12, 7, -1, 21, 0] 
for i in range (len(list_1)):
      print(list_1[i])         # вывод каждого элемента списка 
# 1-я итерация цикла (повторение 1): list_1[0] = 12 
# 2-я итерация цикла (повторение 2): list_1[1] = 7 
# 3-я итерация цикла (повторение 3): list_1[2] = -1 
# 4-я итерация цикла (повторение 4): list_1[3] = 21 
# 5-я итерация цикла (повторение 5): list_1[4] = 0

# Основные действия со списками:

# 1.	Удаление последнего элемента списка. 
# Метод pop удаляет последний элемент из списка:

list_1 = [12, 7, -1, 21, 0] 
print(list_1.pop())               # 0 
print(list_1)                     # [12, 7, -1, 21] 
print(list_1.pop())               # 21 
print(list_1)                     # [12, 7, -1] 
print(list_1.pop())               # -1 
print(list_1)                     # [12, 7]

# 2.	Удаление конкретного элемента из списка. 
# Надо указать значение индекса в качестве аргумента функции pop:

list_1 = [12, 7, -1, 21, 0] 
print(list_1.pop(0))                  # 12 
print(list_1)                         # [7, -1, 21, 0]


# 3.	Добавление элемента на нужную позицию. 
# Функция insert — указание индекса (позиции) и значения.
list_1 = [12, 7, -1, 21, 0] 
print(list_1.insert(2, 11)) 
print(list_1)                 # [12, 7, 11, -1, 21, 0]

# Срез списка 

# Отрицательное число в индексе — счёт с конца списка

list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
print(list_1[0])                            # 1 
print(list_1[1])                            # 2 
print(list_1[len(list_1)-1])                # 10 
print(list_1[-5])                           # 6 
print(list_1[:])                            # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] (с начала списка и до конца)
print(list_1[:2])                           # [1, 2] (с начала и выводим до 2-го индекса не включительно)
print(list_1[len(list_1)-2:])               # [9, 10] (от 2-го эл-та с конца и до конца)
print(list_1[2:9])                          # [3, 4, 5, 6, 7, 8, 9] (интервал от и до)
print(list_1[6:-18])                        # [] 
print(list_1[0:len(list_1):6])              # [1, 7] ( с начала и до конца списка с шагом 6)
print(list_1[::6])                          # [1, 7]  ( с начала и до конца списка с шагом 6)

# Кортеж — это неизменяемый список

t = ()                   # создание пустого кортежа 
print(type(t))           # class <'tuple'> 

colors = ['red', 'green', 'blue'] 
print(colors)                 # ['red', 'green', 'blue'] 

t = tuple(colors) 
print(t)                      # ('red', 'green', 'blue') 

t = tuple (['red', 'green', 'blue']) 
print(t[0])                     # red 
print(t[2])                     # blue 

for i in t: 
      print(i)                  # red green blue 

# t[0] = 'black'         # TypeError: 'tuple' object does not support (нельзя изменять кортеж)

t = tuple (['red', 'green', 'blue']) 
red, green, blue = t 
print('r:{} g:{} b:{}'.format(red, green, blue))        # r:red g:green b:blue

# Словари — неупорядоченные коллекции произвольных объектов с доступом по ключу. 
# В списках в качестве ключа используется индекс элемента. 
# В словаре для определения элемента используется значение ключа (строка, число).

dictionary = {} # создание пустого словаря

dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'} 
print(dictionary)                              # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'} 
print(dictionary['left'])                      # ← 
# типы ключей могут отличаться 
print(dictionary['up'])                        # ↑ 
# типы ключей могут отличаться 

dictionary['left'] = '⇐' 
print(dictionary['left'])                    # ⇐ 

# print(dictionary['type'])                  # KeyError: 'type' 

dictionary [895]  = 8                        # добавление элемента 8  по ключу 895 в словарь

del dictionary['left']                       # удаление элемента 

for item in dictionary:                    
    print('{}: {}'.format(item, dictionary[item]))   # вывод значения по ключу 

# или 

for (k,v) in dictionary.items():
    print (k,v)                                      # вывод значения (v) по ключу (k)

# up: ↑ 
# down: ↓ 
# right: →

# Множества 
# Множества содержат в себе уникальные (не повторяющиеся) элементы, не обязательно упорядоченные. 
# Одно множество может содержать значения любых типов. 
# Над множествами можно совершать любые стандартные операции, например, объединение, пересечение и разность. 

colors = {'red', 'green', 'blue'} 
print(colors)                              # {'red', 'green', 'blue'} 

# add – добавить значение (уникальное)
colors.add ('red') 
print(colors)                              # {'red', 'green', 'blue'} 
                                           # (ничего не добавляется, так как значение 'red' уже есть)

colors.add('gray') 
print(colors)                              # {'red', 'green', 'blue', 'gray'} 

# remove – удалить значение
colors.remove('red') 
print(colors)                              # {'green', 'blue', 'gray'} 

# colors.remove('red')                       # KeyError: 'red' (нет такого значения)

# discard – проверяет, есть ли данное значение в множестве
colors.discard('red')                           # ok 
print(colors)                                   # {'green', 'blue', 'gray'}  

# clear – удалить все элементы из множества
colors.clear()                                  # { } 
print(colors)                                   # set()

# создать пустое множество
q = set()

# Операции со множествами в Python
a = {1, 2, 3, 5, 8} 
b = {2, 5, 8, 13, 21} 
c = a.copy()                                    # c = {1, 2, 3, 5, 8} 
u = a.union(b)           # объединение         	# u = {1, 2, 3, 5, 8, 13, 21} 
i = a.intersection(b)    # пересечение          # i = {8, 2, 5} 
dl = a.difference(b)     # разность а - b       # dl = {1, 3} 
dr = b.difference(a)     # разность b - а       # dr = {13, 21} 
q=a.union(b).difference (a.intersection(b))     # {1, 21, 3, 13} – первое действие в скобках (intersection а и b), потом по прядку (a объединяем с b) и 
                                                # находим разность между двумя новыми множествами.

# Неизменяемое или замороженное множество(frozenset) — множество, с которым не будут работать методы удаления и добавления.

a = {1, 2, 3, 5, 8} 
b = frozenset(a) 
print(b)               # frozenset({1, 2, 3, 5, 8})

# List Comprehension 

# Одна из культовых фишек Python — list comprehension (редко переводится на русский, но можно использовать определение «генератора списка»).
# List comprehension — это упрощенный подход к созданию списка, который задействует цикл for, а также инструкции if-else для определения того, 
# что в итоге окажется в финальном списке.

# 1.	Простая ситуация — список: 
list_1 = [exp for item in iterable] 

# 2.	Выборка по заданному условию: 
list_1 = [exp for item in iterable (if conditional) ] 

# 3.	Задача: 
# Создать список, состоящий из четных чисел в диапазоне от 1 до 100. 
# Решение: 
# 1.	Создать список чисел от 1 до 100 
list_1 = []
for i in range(1, 101): 
    list_1.append(i) 
    print(list_1)               # [1, 2, 3,..., 100] 

# Эту же функцию можно записать так: 
list_1 = [i for i in range(1, 101)]     # [1, 2, 3,..., 100]  

# 2.	Добавить условие (только чётные числа)
list_1 = [i for i in range(1, 101) if i % 2 == 0]   # [2, 4, 6,..., 100]

# 3.	Допустим, вы решили создать пары каждому из чисел (кортежи) 
list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0]           # [(2, 2), (4, 4),..., (100, 100)]

# 4.	Также можно умножать, делить, прибавлять, вычитать. Например, умножить значение на 2. 
list_1 = [i * 2 for i in range(10) if i % 2 == 0] 
print(list_1)                                   # [0, 4, 8, 12, 16]
